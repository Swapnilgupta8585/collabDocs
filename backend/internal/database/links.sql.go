// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: links.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createLink = `-- name: CreateLink :one
INSERT INTO links(
    token,
    created_at,
    updated_at,
    doc_id,
    permission,
    expires_at
)VALUES(
    $1,
    NOW(),
    NOW(),
    $2,
    $3,
    $4
)
RETURNING token, created_at, updated_at, doc_id, permission, expires_at
`

type CreateLinkParams struct {
	Token      string
	DocID      uuid.UUID
	Permission string
	ExpiresAt  time.Time
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, createLink,
		arg.Token,
		arg.DocID,
		arg.Permission,
		arg.ExpiresAt,
	)
	var i Link
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DocID,
		&i.Permission,
		&i.ExpiresAt,
	)
	return i, err
}

const getDocInfoFromToken = `-- name: GetDocInfoFromToken :one
SELECT docs.id, docs.content, links.permission FROM links
JOIN docs ON links.doc_id = docs.id
WHERE links.token=$1 AND links.expires_at > NOW()
`

type GetDocInfoFromTokenRow struct {
	ID         uuid.UUID
	Content    string
	Permission string
}

func (q *Queries) GetDocInfoFromToken(ctx context.Context, token string) (GetDocInfoFromTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getDocInfoFromToken, token)
	var i GetDocInfoFromTokenRow
	err := row.Scan(&i.ID, &i.Content, &i.Permission)
	return i, err
}
